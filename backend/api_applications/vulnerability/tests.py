import unittest
from unittest.mock import MagicMock, patch
import cve_lookup


class TestVulnerabilityModule(unittest.TestCase):

    def test_get_service_ssh(self):
        banners = {
            22: "SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3"
        }
        result = cve_lookup.get_service(banners)
        self.assertTrue(any("OpenSSH" in x for x in [r[0] for r in result]))

    def test_get_service_ftp(self):
        banners = {
            21: "220 vsFTPd 3.0.3"
        }
        result = cve_lookup.get_service(banners)
        self.assertTrue(any("vsFTPd" in x for x in [r[0] for r in result]))

    def test_get_service_http_server(self):
        banners = {
            80: "HTTP/1.1 200 OK Server: Apache/2.4.29 (Ubuntu) X-Powered-By: PHP/7.2.24"
        }
        result = cve_lookup.get_service(banners)
        found_services = [s[0] for s in result]
        self.assertIn("Apache", found_services)
        self.assertIn("PHP", found_services)

    def test_get_service_no_match(self):
        banners = {8080: "Nothing to match here"}
        result = cve_lookup.get_service(banners)
        self.assertEqual(result, [(None, None)])

    @patch("gzip.open")
    @patch("os.path.join")
    def test_search_cve_by_service_version_returns_results(self, mock_join, mock_gzip_open):
        mock_join.return_value = "fakepath"
        fake_cve_data = {
            "CVE_Items": [
                {
                    "cve": {
                        "CVE_data_meta": {"ID": "CVE-2021-0001", "ASSIGNER": "testassigner"},
                        "description": {"description_data": [
                            {"value": "apache 2.4.29 remote vulnerability"}
                        ]}
                    },
                    "publishedDate": "2021-01-01T00:00Z"
                }
            ]
        }
        mock_gzip_open.return_value.__enter__.return_value = MagicMock()
        with patch("json.load", return_value=fake_cve_data):
            result = cve_lookup.search_cve_by_service_version(
                ("Apache", "2.4.29"))
        self.assertTrue(any("CVE-2021-0001" in c["cve_id"] for c in result))

    @patch("vulnerability.get_service")
    @patch("vulnerability.search_cve_by_service_version")
    def test_get_vul_with_service(self, mock_search_cve, mock_get_service):
        mock_get_service.return_value = [("Apache", "2.4.29")]
        mock_search_cve.return_value = [
            {"cve_id": "CVE-2020-1234", "description": "Fake vul",
                "published": "2020-12-01"}
        ]
        banners = {80: "Server: Apache/2.4.29"}
        vulns = cve_lookup.get_vul(banners)
        self.assertIn("Apache", vulns)
        self.assertEqual(vulns["Apache"][0]["cve_id"], "CVE-2020-1234")

    def test_get_service_multiple_banners(self):
        banners = {
            21: "220 vsFTPd 3.0.3",
            25: "220 mail.example.com ESMTP Postfix",
            80: "HTTP/1.1 200 OK Server: Nginx/1.18.0"
        }
        result = cve_lookup.get_service(banners)
        all_services = [svc[0] for svc in result]
        self.assertTrue(any(s in all_services for s in [
                        "vsFTPd", "Postfix", "Nginx"]))


if __name__ == "__main__":
    unittest.main()
