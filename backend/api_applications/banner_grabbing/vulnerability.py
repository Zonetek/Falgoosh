import json
import gzip
import requests
import shutil
import os
import re
import logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

def search_cve_by_service_version(data):
    service_name = data[0]
    version = data[1]
    script_dir = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(script_dir, "cve_data", "nvdcve-1.1-modified.json.gz")
    with gzip.open(filename, "rt", encoding="utf-8") as f:
        file = json.load(f)
    results = []
    service_name_lc = service_name.lower()
    version_lc = str(version).lower()
    for item in file["CVE_Items"]:
        descs = item["cve"]["description"].get("description_data", [])
        for desc_obj in descs:
            desc_text = desc_obj.get("value", "").lower()
            if service_name_lc in desc_text and version_lc in desc_text:
                results.append(
                    {
                        "cve_id": item["cve"]["CVE_data_meta"]["ID"],
                        "description": desc_obj.get("value", ""),
                        "published": item.get("publishedDate", ""),
                        "assigner": item["cve"]["CVE_data_meta"].get("ASSIGNER", ""),
                    }
                )
                break 
    return results


def download_and_replace_nvd(target_dir=None):
    file_path = os.path.join(target_dir, f"nvdcve-1.1-modified.json.gz")
    url = f"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz"
    with requests.get(url, stream=True) as r:
        with open(file_path, "wb") as f:
            shutil.copyfileobj(r.raw, f)



def get_service(data):
    results = {}
    for port in data:
        banner = data[port]

        results = []

        m = re.match(r"SSH-\d+\.\d+-(\S+)", banner)
        if m:
            parts = m.group(1).split("_")
            service = parts[0]
            version = parts[1] if len(parts) > 1 else None
            results.append((service, version))

        m = re.match(r"220\s+([A-Za-z0-9\-]+)\s*([\d\.]+)?", banner)
        if m:
            service, version = m.group(1), m.group(2)
            results.append((service, version))

        m = re.search(
            r"(Postfix|Exim|Sendmail|Exchange|MailEnable)[^\d]*([\d\.]+)?", banner, re.I
        )
        if m:
            service = m.group(1)
            version = m.group(2) if m.group(2) else None
            results.append((service, version))

        http_like = re.findall(
            r"(Server|X-Powered-By):\s*([A-Za-z0-9._ \-]+)/?([\d\.]+)?", banner, re.I
        )
        for _, name, ver in http_like:
            service = name.strip()
            version = ver.strip() if ver else None
            results.append((service, version))

        generic = re.findall(
            r"([A-Za-z0-9\-_]{3,})[ \/\-_]v?(\d+\.\d+(\.\d+)*)", banner
        )
        for tup in generic:
            service = tup[0]
            version = tup[1]
            results.append((service, version))

        results = list(set(results))

        return results if results else [(None, None)]


def get_vul(data):
    data = get_service(data)
    result = {}
    for service in data:
        result[service] = search_cve_by_service_version(service)

    logging.info(f'vuln{get_vul}')
    return result
