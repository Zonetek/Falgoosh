services:
  web:
    build:
      context: .
      dockerfile: ./docker/web.Dockerfile
    container_name: web-api
    volumes:
      - .:/app
    working_dir: /app
    ports:
      - "127.0.0.1:8000:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.dev
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 15s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "127.0.0.1:5673:5672"
      - "127.0.0.1:15673:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    restart: always
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    container_name: postgres
    image: postgres:17
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "0:5433"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "falgoosh"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: .
      dockerfile: ./docker/web.Dockerfile
    container_name: celery
    command: celery -A config worker -l info
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.dev
    working_dir: /app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      web:
        condition: service_started
    restart: always
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "ps", "aux"]
      interval: 15s
      timeout: 5s
      retries: 3

  celery-beat:
    build:
      context: .
      dockerfile: ./docker/web.Dockerfile
    container_name: celery-beat
    command: celery -A config beat -l info
    volumes:
      - .:/app
    working_dir: /app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      web:
        condition: service_started
    restart: always
    networks:
      - mynetwork

  mongodb:
    image: mongo:latest
    container_name: mongodb_container
    ports:
      - "127.0.0.1:27018:27017"
    volumes:
      - ./mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: always
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_AUTH_DB=${MONGO_AUTH_DB}
    networks:
      - mynetwork
    healthcheck:
      test: [
        "CMD", "mongosh",
        "--host", "localhost",
        "--port", "27017",
        "-u", "${MONGO_INITDB_ROOT_USERNAME}",
        "-p", "${MONGO_INITDB_ROOT_PASSWORD}",
        "--authenticationDatabase", "admin",
        "--eval", "db.adminCommand('ping')"
      ]
      interval: 10s
      timeout: 10s
      retries: 10

  scanner:
    build:
      context: .
      dockerfile: ./docker/discovery.Dockerfile
    container_name: scanner
    command: python -m discovery.scanner
    restart: on-failure
    networks:
      - mynetwork
    env_file:
      - .env
    cap_add:
      - NET_RAW
      - NET_ADMIN
    depends_on:
      - mongodb
    working_dir: /app/api_applications

  banner_grabbing:
    build:
      context: .
      dockerfile: ./docker/banner_grabbing.Dockerfile
    container_name: banner_grabbing
    command: python -m banner_grabbing.main
    restart: on-failure
    networks:
      - mynetwork
    env_file:
      - .env
    cap_add:
      - NET_RAW
      - NET_ADMIN
    depends_on:
      - mongodb
    working_dir: /app/api_applications


  enrichments:
    build:
      context: .
      dockerfile: ./docker/enrichments.Dockerfile
    container_name: enrichments
    command: python -m enrichment.main
    restart: on-failure
    networks:
      - mynetwork
    env_file:
      - .env
    cap_add:
      - NET_RAW
      - NET_ADMIN
    depends_on:
      - mongodb
    working_dir: /app/api_applications
    dns:
      - 8.8.8.8
      - 1.1.1.1


  vulnerability:
      build:
        context: .
        dockerfile: ./docker/vulnerability.Dockerfile
      container_name: vulnerability
      command: python -m vulnerability.main
      restart: on-failure
      networks:
        - mynetwork
      env_file:
        - .env
      cap_add:
        - NET_RAW
        - NET_ADMIN
      depends_on:
        - mongodb
      working_dir: /app/api_applications


networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
